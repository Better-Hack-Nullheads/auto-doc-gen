import { generateText } from 'ai'
import { JsonAnalysisResult } from '../exporters/json-exporter'
import { AIConfig, AIProvider } from '../types/ai.types'
import { PromptTemplates } from '../utils/prompt-templates'
import { AnthropicProvider } from './providers/anthropic-provider'
import { GoogleProvider } from './providers/google-provider'
import { OpenAIProvider } from './providers/openai-provider'

export class AIService {
    private provider: AIProvider
    private model: any
    private config: AIConfig

    constructor(config: AIConfig) {
        this.config = config
        this.provider = this.createProvider(config.provider)
        this.model = this.provider.createModel(config.model, config.apiKey)
    }

    async analyzeProject(analysisData: JsonAnalysisResult): Promise<string> {
        const prompt = this.buildPrompt(analysisData)

        try {
            console.log('üîç Sending request to AI...')
            const result = await generateText({
                model: this.model,
                prompt,
                temperature: this.config.temperature || 0.7,
                maxTokens: this.config.maxTokens || 4000,
            })

            console.log('‚úÖ AI response received')

            if (!result.text) {
                throw new Error('No text generated by AI')
            }

            return result.text
        } catch (error) {
            console.error('‚ùå AI Service Error:', error)
            throw new Error(
                `AI analysis failed: ${
                    error instanceof Error ? error.message : 'Unknown error'
                }`
            )
        }
    }

    private createProvider(providerName: string): AIProvider {
        switch (providerName) {
            case 'google':
                return new GoogleProvider()
            case 'openai':
                return new OpenAIProvider()
            case 'anthropic':
                return new AnthropicProvider()
            default:
                throw new Error(`Unsupported AI provider: ${providerName}`)
        }
    }

    private buildPrompt(analysisData: JsonAnalysisResult): string {
        // Use custom prompt if provided in config
        if (this.config.customPrompt) {
            return PromptTemplates.buildPrompt(
                this.config.customPrompt,
                analysisData
            )
        }

        // Use default template
        const template = PromptTemplates.getDefaultTemplate()
        return PromptTemplates.buildPrompt(template, analysisData)
    }

    static createFromConfig(config: AIConfig): AIService {
        return new AIService(config)
    }

    static getAvailableProviders(): string[] {
        return ['google', 'openai', 'anthropic']
    }

    static getAvailableModels(provider: string): string[] {
        switch (provider) {
            case 'google':
                return new GoogleProvider().models
            case 'openai':
                return new OpenAIProvider().models
            case 'anthropic':
                return new AnthropicProvider().models
            default:
                return []
        }
    }
}
